<Application x:Class="MULTITUDE.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:MULTITUDE"
             xmlns:cc="clr-namespace:MULTITUDE.CustomControl"
             xmlns:locald="clr-namespace:MULTITUDE.Class.DocumentTypes"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             StartupUri="/Canvas/VirtualWorkspaceWindow.xaml">
    <!--  <Debug> Commented so we can handle exception in VS; Uncommet for release:  DispatcherUnhandledException="Application_DispatcherUnhandledException" -->
    <Application.Resources>
        <ResourceDictionary>
            <!--  here you can add some more resources -->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Themes/Generic.xaml"/>
                <ResourceDictionary Source="/Resource/Styles/ComboBoxStyle.xaml"/>
                <ResourceDictionary Source="/Resource/Styles/ExpanderStyle.xaml"/>
                <ResourceDictionary Source="/Resource/Styles/ScrollViewerStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- Common UI Colors -->
            <SolidColorBrush x:Key="ForegroundText" Color="#FFC7C7BE"/>
            <SolidColorBrush x:Key="TransparentText" Color="#66C7C7BE"/>
            <SolidColorBrush x:Key="DimTextBorder" Color="#FFABADB3"/>
            <SolidColorBrush x:Key="HighlightBorder" Color="#FF3399FF"/>
            <SolidColorBrush x:Key="ValidityWarningBorder" Color="#CCDC5959"/>
            <SolidColorBrush x:Key="FrameBackground" Color="#FF272727"/>
            <SolidColorBrush x:Key="SurfaceBackground" Color="#FF2C2C2C"/>
            <SolidColorBrush x:Key="ButtonBackground" Color="#CC333337"/>
            <SolidColorBrush x:Key="ButtonBackground2" Color="#FF383737"/>
            <SolidColorBrush x:Key="ButtonBorderBrush" Color="#FF707070"/>
            <SolidColorBrush x:Key="WindowTitleBrush" Color="#FF3F3F46"/>
            <SolidColorBrush x:Key="DialogBackground" Color="#DD292929"/>
            <SolidColorBrush x:Key="PopupWindowBorder" Color="#FF3E3E3E"/>
            <SolidColorBrush x:Key="GoldenForegroundText" Color="#FFD8B465"/>
            <SolidColorBrush x:Key="MatureGoldenForegroundText" Color="#FFC79933"/>

            <!-- Document Related Data Providers -->
            <local:ClueToListConverter x:Key="ClueToListConverter"/>

            <!-- Enum related converters -->
            <ObjectDataProvider x:Key="DocumentTypeEnum" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type Type="locald:DocumentType"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider x:Key="MemoirSearchContextEnum" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type Type="cc:SearchComboBoxEnum"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ObjectDataProvider x:Key="PlaylistPlayModeTypeEnum" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type Type="locald:PlayMode"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <!-- Windowless dialog/popup window -->
            <!-- Popup windows are more customized in background and border decoration; Size is more specific than fit -->
            <Style x:Key="PopupWindow" TargetType="Window">
                <Setter Property="ShowInTaskbar" Value="False"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Topmost" Value="True"/>
                <Setter Property="ShowActivated" Value="False"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="5" ShadowDepth="0"/>
                    </Setter.Value>
                </Setter>
                <!-- Instead of TopMost, set Owner -->
            </Style>
            <!-- Dialog windows has unified border and background look -->
            <Style x:Key="DialogWindow" TargetType="Window">
                <Setter Property="ShowInTaskbar" Value="False"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource DialogBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource PopupWindowBorder}"/>
                <Setter Property="SizeToContent" Value="WidthAndHeight"/>
                <Setter Property="ResizeMode" Value="NoResize"/>
                <!-- Instead of TopMost, set Owner -->
            </Style>
            <!-- Content controls that serve as a panel to hold other elements -->
            <Style x:Key="ContentPanel" TargetType="ContentControl">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{StaticResource DialogBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource PopupWindowBorder}"/>
            </Style>
            <!-- Content controls that serve as a in-window gadet to hold other elements -->
            <Style x:Key="InWindowGadget" TargetType="ContentControl">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </Style>

            <!-- Canvas Space User Control -->
            <Style x:Key="CanvasSpaceUserControl" TargetType="UserControl">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UIElement}}}"/>
                <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UIElement}}}"/>
            </Style>
            
            <!-- Window for Canvas Space as a form of popup -->
            <Style x:Key="CanvasSpaceWindow" TargetType="Window">
                <Setter Property="Foreground" Value="{x:Null}"/>
                <Setter Property="WindowState" Value="Maximized"/>
                <Setter Property="ResizeMode" Value="NoResize"/>
                <Setter Property="ShowInTaskbar" Value="False"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="WindowStyle" Value="None"/>
            </Style>

            <!-- Round corner buttons -->
            <SolidColorBrush x:Key="DimButtonRim" Color="#FF163264"/>
            <SolidColorBrush x:Key="DimButtonHighlightRim" Color="#FF3C68B8"/>
            <SolidColorBrush x:Key="DimButtonPressedRim" Color="#FF42B83C"/>
            <SolidColorBrush x:Key="DimButtonSurface" Color="#FF061234"/>
            <SolidColorBrush x:Key="DimButtonPressedSurface" Color="#FF341706"/>
            <SolidColorBrush x:Key="DimButtonText" Color="#FFA5C6F5"/>
            <Style x:Key="RoundCornerButton" TargetType="Button">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Margin" Value="6"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Width" Value="75"/>
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=DimButtonText}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=DimButtonSurface}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=DimButtonRim}"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Border" CornerRadius="2" 
                                Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}" 
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}">
                                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DimTextBorder}" />
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DimTextBorder}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DimButtonHighlightRim}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HighlightBorder}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DimButtonPressedSurface}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DimButtonPressedRim}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="RoundCornerButtonThickTransparent" TargetType="Button">
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Border" CornerRadius="4"
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}">
                                <ContentPresenter Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderThickness" Value="2"/>
                                    <Setter Property="BorderBrush" Value="MintCream"/>
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderThickness" Value="1" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderThickness" Value="2"/>
                                    <Setter Property="BorderBrush" Value="MintCream"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" Value="#59E8E8E8" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Backgroundless Clean Listbox Style -->
            <Style x:Key="ListBoxStyle" TargetType="ItemsControl">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="#FF636363"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
            </Style>

            <!-- Textbox Style -->
            <Style x:Key="TextboxStyle" TargetType="TextBox">
                <Setter Property="Text" Value="{x:Static local:App.DefaultTextboxText}"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=TransparentText}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=SurfaceBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=DimTextBorder}"/>
            </Style>
            <!-- Mystical Blue; Used for large text areas like search bar -->
            <SolidColorBrush x:Key="ForegroundTextMysticalBlue" Color="#FF3E9DC9"/>
            <SolidColorBrush x:Key="TransparentTextMysticalBlue" Color="#D84D6E83"/>
            <SolidColorBrush x:Key="DimTextBorderMysticalBlue" Color="#FF3F6D93"/>
            <SolidColorBrush x:Key="SurfaceBackgroundMysticalBlue" Color="#72173961"/>
            <Style x:Key="RoundCornerTextboxStyle" TargetType="TextBox">
                <Setter Property="Text" Value="{x:Static local:App.DefaultTextboxText}"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundTextMysticalBlue}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=SurfaceBackgroundMysticalBlue}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=DimTextBorderMysticalBlue}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/> <!-- https://stackoverflow.com/questions/6996248/how-can-i-change-the-way-that-focus-looks-like-in-wpf -->
                <Setter Property="Height" Value="20"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="10" Padding="5,0,0,0">
                                <ScrollViewer x:Name="PART_ContentHost"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Text" Value="{x:Static local:App.DefaultTextboxText}">
                                    <Setter Property="Foreground" Value="{StaticResource TransparentTextMysticalBlue}"/>
                                </Trigger>
                                <Trigger Property="Width" Value="Auto">
                                    <Setter Property="MinWidth" Value="100"/>
                                </Trigger>
                                <Trigger Property="Height" Value="Auto">
                                    <Setter Property="MinHeight" Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="HeavilyDecoratedRoundCornerTextboxStyle" TargetType="TextBox">
                <Setter Property="Text" Value="{x:Static local:App.DefaultTextboxText}"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="#FF2d2c2c"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <!-- <Setter Property="Height" Value="35"/> Let it be automatic -->
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                                <Border Background="{x:Null}" x:Name="PART_ContentHost" Padding="5,0,0,0"
                                    BorderBrush="#FF747474" CornerRadius="4" BorderThickness="0, 0, 0, 1">
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Text" Value="{x:Static local:App.DefaultTextboxText}">
                                    <Setter Property="Foreground" Value="{StaticResource TransparentTextMysticalBlue}"/>
                                </Trigger>
                                <Trigger Property="Width" Value="Auto">
                                    <Setter Property="MinWidth" Value="100"/>
                                </Trigger>
                                <Trigger Property="Height" Value="Auto">
                                    <Setter Property="MinHeight" Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" Color="#FF3F6D93"/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MultiLineTextboxStyle" TargetType="TextBox" BasedOn="{StaticResource TextboxStyle}">
                <Setter Property="AcceptsReturn" Value="true"/>
                <Setter Property="AcceptsTab" Value="true"/>
                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            </Style>
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundText}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=ButtonBackground}"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=ButtonBorderBrush}"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
                <Style.Triggers>
                    <!-- Not working -->
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Background" Value="{StaticResource ResourceKey=ButtonBackground}"/>
                        <Setter Property="Foreground" Value="Gray"/>
                        <Setter Property="BorderThickness" Value="0"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="UIFieldStyle" TargetType="Label">
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundText}"/>
            </Style>
            <Style x:Key="GoldenBoldTextStyle" TargetType="Label">
                <Setter Property="FontSize" Value="25"/>
                <Setter Property="Foreground" Value="#BFF1CB77"/>
            </Style>
            <Style x:Key="UIContentStyle" TargetType="Label">
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundText}"/>
            </Style>
            <Style x:Key="UITitleStyle" TargetType="Label">
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundText}"/>
            </Style>
            <!-- Pending elaboration: https://msdn.microsoft.com/en-us/library/ms752094(v=vs.110).aspx, https://stackoverflow.com/questions/22673483/how-do-i-create-a-flat-combo-box-using-wpf, https://stackoverflow.com/questions/16392670/custom-combobox-in-wpf-application -->
            <!-- Currently now woring due to our default style -->
            <Style x:Key="ComboBoxWithCustomColorStyle" TargetType="ComboBox">
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=ForegroundText}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=ButtonBackground}"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="FontSize" Value="8"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=ButtonBorderBrush}"/>
            </Style>
            <!-- A transparent background white border combo box, Details pending elaboration -->
            <Style x:Key="DocumentTypeFilteredClueComboBox" TargetType="ComboBox">
                <Setter Property="Foreground" Value="#BFEAEAEA"/>
                <Setter Property="Background" Value="#59E2E2E2"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="BorderBrush" Value="#BFEAEAEA"/>
            </Style>
            <!-- Button -->
            <SolidColorBrush x:Key="WhiterForegroundText" Color="#FFECECEC"/>
            <SolidColorBrush x:Key="BrightButtonBackground" Color="#FF4D4D4D"/>
            <SolidColorBrush x:Key="HighlightBlueButtonBackground" Color="#4C2761B6"/>
            <Style x:Key="CircularButton" TargetType="Button">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{StaticResource ResourceKey=WhiterForegroundText}"/>
                <Setter Property="Background" Value="{StaticResource ResourceKey=BrightButtonBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=ButtonBorderBrush}"/>
                
                <Setter Property="FontSize" Value="15"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
                <Setter Property="ToolTipService.Placement" Value="MousePoint"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <!-- Norice don't apply a margin to Border here because it's managed by parent control -->
                            <Border x:Name="Border" CornerRadius="43" 
                                    Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" 
                                    Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}" 
                                Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" 
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}">
                                <ContentPresenter Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DimTextBorder}" />
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DimTextBorder}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightBlueButtonBackground}" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource HighlightBorder}"/>
                                </Trigger>
                                <!--
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Items Control: items control by default do not have scrollviewer -->
            <Style x:Key="ItemsControlStyle" TargetType="ItemsControl">
                <Setter Property="Background" Value="{StaticResource FrameBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource DimTextBorder}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
            </Style>
            <Style x:Key="TransparentItemsControlStyle" TargetType="ItemsControl">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type sys:String}">
                            <Label Content="{Binding}">
                                <Label.Style>
                                    <Style TargetType="{x:Type Label}">
                                        <Setter Property="Foreground" Value="{StaticResource ForegroundText}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="Hand"/>
                                                <Setter Property="Foreground" Value="White"/>
                                                <!-- Might add some glow as well? -->
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Label.Style>
                            </Label>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- Items Control: items control by default do not have scrollviewer -->
            <Style x:Key="ScrollableItemsControlStyleV" TargetType="ItemsControl">
                <Setter Property="Background" Value="{StaticResource FrameBackground}"/>
                <!-- Pending -->
                <Setter Property="BorderBrush" Value="{StaticResource DimTextBorder}"/>
                <!-- Pending -->
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
            </Style>

            <!-- Scrollviwer -->
            <Style x:Key="ScrollViewerStyle" TargetType="ScrollViewer">
                <Setter Property="CanContentScroll" Value="True"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Hidden"/>
            </Style>

            <!-- Search bar tooltip label  -->
            <Style x:Key="SearchBarValidationAndTooltipLabel" TargetType="Label">
                <Setter Property="Content" Value="✓"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
                <Setter Property="ToolTip" Value="{x:Static cc:MemoirSearchBar.ValidationPassText}"/>
                <Style.Triggers>
                    <Trigger Property="Content" Value="!">
                        <Setter Property="ToolTip" Value="{x:Static cc:MemoirSearchBar.ValidationFailText}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Shapes -->
            <DrawingImage x:Key="MediaPlayRightTriangle">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <!-- Triangle -->
                            <PathGeometry>
                                <PathFigure StartPoint="0,0" IsClosed="True">
                                    <LineSegment Point="7,5"/>
                                    <LineSegment Point="0,10"/>
                                </PathFigure>
                            </PathGeometry>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPauseDoubleLines">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Line -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,-1" IsClosed="True">
                                        <LineSegment Point="1,-1"/>
                                        <LineSegment Point="1,11"/>
                                        <LineSegment Point="0, 11"/>
                                    </PathFigure>
                                </PathGeometry>
                                <!-- Line -->
                                <PathGeometry>
                                    <PathFigure StartPoint="5,-1" IsClosed="True">
                                        <LineSegment Point="6,-1"/>
                                        <LineSegment Point="6,11"/>
                                        <LineSegment Point="5, 11"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPlayNextTriangleWithLineLeft">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Line -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,-1" IsClosed="True">
                                        <LineSegment Point="1,-1"/>
                                        <LineSegment Point="1,11"/>
                                        <LineSegment Point="0, 11"/>
                                    </PathFigure>
                                </PathGeometry>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="5,5" IsClosed="True">
                                        <LineSegment Point="12,0"/>
                                        <LineSegment Point="12,10"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPlayNextTriangleWithLineRight">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0" IsClosed="True">
                                        <LineSegment Point="7,5"/>
                                        <LineSegment Point="0,10"/>
                                    </PathFigure>
                                </PathGeometry>
                                <!-- Line -->
                                <PathGeometry>
                                    <PathFigure StartPoint="10,-1" IsClosed="True">
                                        <LineSegment Point="11,-1"/>
                                        <LineSegment Point="11,11"/>
                                        <LineSegment Point="10, 11"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPlaySpeedNextDoubleTriangleLeft">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,5" IsClosed="True">
                                        <LineSegment Point="7,0"/>
                                        <LineSegment Point="7,10"/>
                                    </PathFigure>
                                </PathGeometry>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="7,5" IsClosed="True">
                                        <LineSegment Point="14,0"/>
                                        <LineSegment Point="14,10"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPlaySpeedNextDoubleTriangleRight">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0" IsClosed="True">
                                        <LineSegment Point="7,5"/>
                                        <LineSegment Point="0,10"/>
                                    </PathFigure>
                                </PathGeometry>
                                <!-- Triangle -->
                                <PathGeometry>
                                    <PathFigure StartPoint="7,0" IsClosed="True">
                                        <LineSegment Point="14,5"/>
                                        <LineSegment Point="7,10"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="MediaPlayStopSqaure">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Sqaure -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0" IsClosed="True">
                                        <LineSegment Point="0,10"/>
                                        <LineSegment Point="10,10"/>
                                        <LineSegment Point="10,0"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="SquareArrowRight">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Arrow -->
                                <PathGeometry>
                                    <PathFigure StartPoint="0,0" IsClosed="True">
                                        <LineSegment Point="4,0"/>
                                        <LineSegment Point="10,6"/>
                                        <LineSegment Point="4,12"/>
                                        <LineSegment Point="0,12"/>
                                        <LineSegment Point="6,6"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>
            <DrawingImage x:Key="SquareArrowLeft">
                <DrawingImage.Drawing>
                    <GeometryDrawing Brush="White">
                        <GeometryDrawing.Pen>
                            <Pen Brush="White" Thickness="1"/>
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <GeometryGroup>
                                <!-- Arrow -->
                                <PathGeometry>
                                    <PathFigure StartPoint="6,0" IsClosed="True">
                                        <LineSegment Point="10,0"/>
                                        <LineSegment Point="4,6"/>
                                        <LineSegment Point="10,12"/>
                                        <LineSegment Point="6,12"/>
                                        <LineSegment Point="0,6"/>
                                    </PathFigure>
                                </PathGeometry>
                            </GeometryGroup>
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingImage.Drawing>
            </DrawingImage>

            <!-- Specialized Styles -->
            <Style x:Key="AutoHideDocumentNameTextBox" TargetType="TextBox">
                <Setter Property="MinWidth" Value="50"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="35"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Opacity" Value="0.3"/>
                <Setter Property="IsReadOnly" Value="true"/>
                <Setter Property="IsReadOnlyCaretVisible" Value="False"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="False"/> <!--Not working and cause thing slow -->
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.300" To="1" Storyboard.TargetProperty="Opacity" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:0.150" To="0.3" Storyboard.TargetProperty="Opacity" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="Opacity" Value="1">
                        <Setter Property="IsReadOnly" Value="False"/>
                    </Trigger>
                    <Trigger Property="IsReadOnly" Value="False">
                        <Setter Property="TextDecorations" Value="Underline"/>
                        <Setter Property="Focusable" Value="True"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="MouseDragArea" TargetType="Border">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="#FF2166E0"/>
                <Setter Property="Background" Value="#590080FF"/>
            </Style>

            <!-- Canvas Space Backgrounds -->
            <ImageBrush x:Key="CollectionCreatorBackground" ImageSource="/MULTITUDE;component/Resource/Images/GridBackground3.png" TileMode="Tile" Stretch="None" ViewportUnits="Absolute" Viewport="0,0,32,32"/>
        </ResourceDictionary>
    </Application.Resources>
</Application>