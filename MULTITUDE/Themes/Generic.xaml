<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MULTITUDE.CustomControl">
    <!-- Fan button colors -->
    <SolidColorBrush x:Key="FanButtonForegroundText" Color="#FFEEEEEE"/>
    <SolidColorBrush x:Key="FanButtonHighlightText" Color="#FFE4C229"/>
    <SolidColorBrush x:Key="FanButtonDisableText" Color="#BF4C99D8"/>

    <SolidColorBrush x:Key="FanButtonTransparentBackground" Color="#FF3E3E3E"/>
    <SolidColorBrush x:Key="FanButtonTransparentBackgroundDropCover" Color="#7F808080"/>
    <SolidColorBrush x:Key="FanButtonHighlightBackground" Color="#D84F82BF"/>
    <SolidColorBrush x:Key="FanButtonDisableBackground" Color="#FF2A2F35"/>
    <SolidColorBrush x:Key="FanButtonPressedBackground" Color="#D78B916E"/>

    <SolidColorBrush x:Key="FanButtonBrightRim" Color="#BF4D78B2"/>
    <SolidColorBrush x:Key="FanButtonHighlightRim" Color="#D83A71C1"/>
    <SolidColorBrush x:Key="FanButtonDisableRim" Color="#59919191"/>
    <!-- Fan button style and template-->
    <Style TargetType="{x:Type local:FanButton}">
        <!-- Fan button style parameters -->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <!--
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>-->
        <Setter Property="Width" Value="0"/>
        <Setter Property="Height" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey=FanButtonForegroundText}"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey=FanButtonTransparentBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=FanButtonBrightRim}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
        <Setter Property="ToolTipService.Placement" Value="MousePoint"/>
        <!-- Fan button template definition -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FanButton}">
                    <ControlTemplate.Resources>
                        <local:RadiusToSizeConverter x:Key="RadiusToSizeConverter"/>
                        <local:AngleToLeftPointConverter x:Key="AngleToLeftPointConverter"/>
                        <local:AngleToRightPointConverter x:Key="AngleToRightPointConverter"/>
                        <!--<local:AngleToLocationConverterX x:Key="AngleToLocationConverterX"/>
                        <local:AngleToLocationConverterY x:Key="AngleToLocationConverterY"/>-->
                        <local:WidthToOriginX x:Key="WidthToOriginX"/>
                        <local:HeightToOriginY x:Key="HeightToOriginY"/>
                        <local:ValueToIsLargeArcConverter x:Key="ValueToIsLargeArcConverter"/>
                    </ControlTemplate.Resources>
                    <Canvas Margin="{TemplateBinding Margin}">
                        <!-- Fan Shape Baackground: exist to solve flickering problem -->
                        <Path Fill="{StaticResource FanButtonTransparentBackgroundDropCover}"  
                                  Stroke="{TemplateBinding BorderBrush}" 
                                  StrokeThickness="{TemplateBinding BorderThickness}" 
                                  HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure IsClosed="True">
                                        <PathFigure.StartPoint>
                                            <MultiBinding Converter="{StaticResource AngleToLeftPointConverter}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                            </MultiBinding>
                                        </PathFigure.StartPoint>
                                        <!-- Upper segment -->
                                        <ArcSegment SweepDirection="Clockwise"
                                                    IsLargeArc="{Binding Converter={StaticResource ValueToIsLargeArcConverter},RelativeSource={RelativeSource TemplatedParent}, Path=Angle}">
                                            <ArcSegment.Size>
                                                <MultiBinding Converter="{StaticResource RadiusToSizeConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                </MultiBinding>
                                            </ArcSegment.Size>
                                            <ArcSegment.Point>
                                                <MultiBinding Converter="{StaticResource AngleToRightPointConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                </MultiBinding>
                                            </ArcSegment.Point>
                                        </ArcSegment>
                                        <!-- First connection line -->
                                        <LineSegment>
                                            <LineSegment.Point>
                                                <MultiBinding Converter="{StaticResource AngleToRightPointConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                </MultiBinding>
                                            </LineSegment.Point>
                                        </LineSegment>
                                        <!-- Lower segment -->
                                        <ArcSegment SweepDirection="Counterclockwise" 
                                                    IsLargeArc="{Binding Converter={StaticResource ValueToIsLargeArcConverter},RelativeSource={RelativeSource TemplatedParent}, Path=Angle}">
                                            <ArcSegment.Size>
                                                <MultiBinding Converter="{StaticResource RadiusToSizeConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                </MultiBinding>
                                            </ArcSegment.Size>
                                            <ArcSegment.Point>
                                                <MultiBinding Converter="{StaticResource AngleToLeftPointConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                </MultiBinding>
                                            </ArcSegment.Point>
                                        </ArcSegment>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <!-- Front Drawing Area, main content -->
                        <Canvas x:Name="FrontCanvas" >
                            <!-- Fan Shape -->
                            <Path x:Name="FanShape" Fill="{TemplateBinding Background}"  
                                  Stroke="{TemplateBinding BorderBrush}" 
                                  StrokeThickness="{TemplateBinding BorderThickness}" 
                                  HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure IsClosed="True">
                                            <PathFigure.StartPoint>
                                                <MultiBinding Converter="{StaticResource AngleToLeftPointConverter}">
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                </MultiBinding>
                                            </PathFigure.StartPoint>
                                            <!-- Upper segment -->
                                            <ArcSegment SweepDirection="Clockwise"
                                                    IsLargeArc="{Binding Converter={StaticResource ValueToIsLargeArcConverter},RelativeSource={RelativeSource TemplatedParent}, Path=Angle}">
                                                <ArcSegment.Size>
                                                    <MultiBinding Converter="{StaticResource RadiusToSizeConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                    </MultiBinding>
                                                </ArcSegment.Size>
                                                <ArcSegment.Point>
                                                    <MultiBinding Converter="{StaticResource AngleToRightPointConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                            <!-- First connection line -->
                                            <LineSegment>
                                                <LineSegment.Point>
                                                    <MultiBinding Converter="{StaticResource AngleToRightPointConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                    </MultiBinding>
                                                </LineSegment.Point>
                                            </LineSegment>
                                            <!-- Lower segment -->
                                            <ArcSegment SweepDirection="Counterclockwise" 
                                                    IsLargeArc="{Binding Converter={StaticResource ValueToIsLargeArcConverter},RelativeSource={RelativeSource TemplatedParent}, Path=Angle}">
                                                <ArcSegment.Size>
                                                    <MultiBinding Converter="{StaticResource RadiusToSizeConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                    </MultiBinding>
                                                </ArcSegment.Size>
                                                <ArcSegment.Point>
                                                    <MultiBinding Converter="{StaticResource AngleToLeftPointConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <!--
                                    <TranslateTransform>
                                        <TranslateTransform.X>
                                            <Binding Converter="{StaticResource WidthToOriginX}" RelativeSource="{RelativeSource TemplatedParent}" Path="Width"/>
                                        </TranslateTransform.X>
                                        <TranslateTransform.Y>
                                            <Binding Converter="{StaticResource HeightToOriginY}" RelativeSource="{RelativeSource TemplatedParent}" Path="Height"/>
                                        </TranslateTransform.Y>
                                    </TranslateTransform>-->
                                        <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                            <!-- Fan Text -->
                            <ContentPresenter x:Name="FanText" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True">
                                <ContentPresenter.RenderTransform>
                                    <TransformGroup>
                                        <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=xControl}" Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=yControl}">
                                            <!--<TranslateTransform.X>
                                            <MultiBinding Converter="{StaticResource AngleToLocationConverterX}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Rotation"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Width"/>
                                            </MultiBinding>
                                        </TranslateTransform.X>
                                        <TranslateTransform.Y>
                                            <MultiBinding Converter="{StaticResource AngleToLocationConverterY}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Angle"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MaxRadius"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="MinRadius"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Rotation"/>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Height"/>
                                            </MultiBinding>
                                        </TranslateTransform.Y>-->
                                        </TranslateTransform>
                                    </TransformGroup>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Canvas>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource FanButtonHighlightText}" />
                            <Setter TargetName="FanShape" Property="Fill" Value="{StaticResource FanButtonHighlightBackground}" />
                            <Setter TargetName="FanShape" Property="Stroke" Value="{StaticResource FanButtonHighlightRim}"/>
                            <Setter TargetName="FanShape" Property="StrokeThickness" Value="2" />
                            <Setter TargetName="FrontCanvas" Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource FanButtonHighlightText}" />
                            <Setter TargetName="FanShape" Property="Fill" Value="{StaticResource FanButtonPressedBackground}" />
                            <Setter TargetName="FanShape" Property="Stroke" Value="{StaticResource FanButtonHighlightRim}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource FanButtonDisableText}" />
                            <Setter TargetName="FanShape" Property="Fill" Value="{StaticResource FanButtonDisableBackground}" />
                            <Setter TargetName="FanShape" Property="Stroke" Value="{StaticResource FanButtonDisableRim}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- Clue button colors -->
    <SolidColorBrush x:Key="ClueButtonLabelText" Color="#FFC9C9C9"/>
    <SolidColorBrush x:Key="ClueButtonLabelDisableText" Color="#FF767676"/>
    <SolidColorBrush x:Key="ClueButtonLabelBackground" Color="#FFBB6161"/>
    <SolidColorBrush x:Key="ClueButtonLabelDisableBackground" Color="#FFE0C1C1"/>
    
    <SolidColorBrush x:Key="ClueButtonClueText" Color="#FFECECEC"/>
    <SolidColorBrush x:Key="ClueButtonClueHighlightText" Color="#FFFFF1B4"/>
    <SolidColorBrush x:Key="ClueButtonClueDisableText" Color="#BFB2B2B2"/>

    <SolidColorBrush x:Key="ClueButtonClueBackground" Color="#FF5373AC"/>
    <SolidColorBrush x:Key="ClueButtonClueHighlightBackground" Color="#FF6A95C9"/>
    <SolidColorBrush x:Key="ClueButtonClueDisableBackground" Color="#FF9EB6D4"/>
    <SolidColorBrush x:Key="ClueButtonCluePressedBackground" Color="#D7B1B685"/>

    <SolidColorBrush x:Key="ClueButtonClueRim" Color="#145191E6"/>
    <SolidColorBrush x:Key="ClueButtonClueHighlightRim" Color="#D876A4E8"/>
    <SolidColorBrush x:Key="ClueButtonClueDisableRim" Color="#D8445E85"/>
    <!-- Clue button style and template-->
    <Style TargetType="{x:Type local:ClueButton}">
        <!-- Clue button style parameters -->
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="PrefixLabelContent" Value=""/>
        <!-- Notice if we use Canvas then control will not have a calculated height -->
        
        <Setter Property="Foreground" Value="{StaticResource ResourceKey=ClueButtonClueText}"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey=ClueButtonClueBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ResourceKey=ClueButtonClueRim}"/>
        <Setter Property="FontSize" Value="16"/>

        <Setter Property="LabelForeground" Value="{StaticResource ResourceKey=ClueButtonLabelText}"/>
        <Setter Property="LabelBackground" Value="{StaticResource ResourceKey=ClueButtonLabelBackground}"/>
        <Setter Property="LabelFontSize" Value="10"/>

        <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
        <Setter Property="ToolTipService.Placement" Value="MousePoint"/>
        <!-- Label button template definition -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ClueButton}">
                    <Grid Margin="{TemplateBinding Margin}">
                        <!-- Overall Border -->
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}" Height="{TemplateBinding Height}" CornerRadius="12">
                            <DockPanel>
                                <!-- Label Border -->
                                <Border x:Name="PrefixLabelBorder" BorderThickness="0" Height="14" Width="14" CornerRadius="7"
                                        Background="{TemplateBinding LabelBackground}" Margin="6,0,0,0">
                                    <!-- Index Label Text -->
                                    <Label x:Name="Label" Content="{TemplateBinding PrefixLabelContent}" Foreground="{TemplateBinding LabelForeground}" FontSize="{TemplateBinding LabelFontSize}" HorizontalAlignment="Center" Padding="0"/>
                                </Border>
                                <!-- Button Text -->
                                <ContentPresenter HorizontalAlignment="Right" VerticalAlignment="Center" RecognizesAccessKey="True" Margin="3,0,12,0"/>
                                <!-- Count Label Text -->
                                <Label x:Name="CountLabel" Content="{TemplateBinding SuffixLabelContent}" Foreground="{TemplateBinding LabelForeground}" FontSize="{TemplateBinding LabelFontSize}" HorizontalAlignment="Center" />
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PrefixLabelContent" Value="">
                            <Setter TargetName="PrefixLabelBorder" Property="Background" Value="{x:Null}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource ClueButtonClueHighlightText}" />
                            <Setter Property="Background" Value="{StaticResource ClueButtonClueHighlightBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource ClueButtonClueHighlightRim}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource ClueButtonClueHighlightText}" />
                            <Setter Property="Background" Value="{StaticResource ClueButtonCluePressedBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource ClueButtonClueHighlightRim}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ClueButtonClueDisableText}" />
                            <Setter Property="Background" Value="{StaticResource ClueButtonClueDisableBackground}" />
                            <Setter Property="BorderBrush" Value="{StaticResource ClueButtonClueDisableRim}" />
                            <Setter TargetName="Label" Property="Foreground" Value="{StaticResource ClueButtonLabelDisableText}"/>
                            <Setter TargetName="PrefixLabelBorder" Property="Background" Value="{StaticResource ClueButtonLabelDisableText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Progress Slider Colors -->
    <!-- Colors -->
    <SolidColorBrush x:Key="ProgressSliderRangeBarBorderBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderRangeBarBackgroundBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderValueBarBorderBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderValueBarBackgroundBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderBorderBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderBackgroundBrush" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderValueBarBorderBrush_Disabled" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderValueBarBackgroundBrush_Disabled" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderBorderBrush_Disabled" Color="White"/>
    <SolidColorBrush x:Key="ProgressSliderBackgroundBrush_Disabled" Color="White"/>
    <!-- Fill Brushes -->

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes -->
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <!-- Progress Slider Style and Templates -->
    <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse Name="Ellipse" Fill="{StaticResource NormalBrush}" Stroke="{StaticResource NormalBorderBrush}" StrokeThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TickBar Name="TopTick" SnapsToDevicePixels="True" Placement="Top" Fill="{StaticResource GlyphBrush}" Height="4" Visibility="Collapsed" />
            <Border Name="TrackBackground" Margin="0" CornerRadius="2"  Height="4" Grid.Row="1" Background="{StaticResource LightBrush}"  BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1" />
            <Track Grid.Row="1" Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource SliderButtonStyle}" Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar Name="BottomTick" SnapsToDevicePixels="True"  Grid.Row="2" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type local:SliderWithProgress}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding Slider.MinWidth}"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TickBar 
      Name="TopTick"
      SnapsToDevicePixels="True" 
      Placement="Left"
      Fill="{StaticResource GlyphBrush}"
      Width="4"
      Visibility="Collapsed" />
            <Border 
      Name="TrackBackground"
      Margin="0"
      CornerRadius="2" 
      Width="4"
      Grid.Column="1"
      Background="{StaticResource HorizontalLightBrush}" 
      BorderBrush="{StaticResource HorizontalNormalBorderBrush}"
      BorderThickness="1" />
            <Track Grid.Column="1" Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource SliderButtonStyle}"
          Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{StaticResource SliderButtonStyle}"
          Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar Name="BottomTick" SnapsToDevicePixels="True" Grid.Column="2" Fill="{TemplateBinding Foreground}" Placement="Right" Width="4" Visibility="Collapsed" /> 
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:SliderWithProgress}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinWidth" Value="104" />
                <Setter Property="MinHeight" Value="21" />
                <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="21" />
                <Setter Property="MinHeight" Value="104" />
                <Setter Property="Template" Value="{StaticResource VerticalSlider}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
